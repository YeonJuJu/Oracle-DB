 /*
    데이터 삽입
    
    INSERT INTO ~ VALUES
 */
 
 DESC STUDENT;

 INSERT INTO STUDENT(STUDNO, NAME, USERID, GRADE, IDNUM, BIRTHDATE, TEL, HEIGHT, WEIGHT, DEPTNO, PROFNO)
 VALUES (10220, '전정국', 'RABBIT', '1', '9709011234567', '97/09/01', '02)123-4567', 178, 70, 202, 9903);
 
 INSERT INTO STUDENT(STUDNO, NAME, USERID, GRADE, IDNUM, BIRTHDATE, TEL, HEIGHT, WEIGHT, DEPTNO, PROFNO)
 VALUES (10221, '김태형', 'TIGER', '1', '9512301234567', '95/12/30', '02)123-4567', 179, 63, 202, 9903);

COMMIT;
ROLLBACK;

SELECT * FROM STUDENT;

-- NOT NULL 이 아닌 곳에 NULL 값 삽입 --

DESC DEPARTMENT;

INSERT INTO DEPARTMENT
VALUES(301, '컴퓨터과학과', NULL, NULL);

SELECT * FROM DEPARTMENT;

INSERT INTO DEPARTMENT(DEPTNO, DNAME)
VALUES(501, '영어교육과');

COMMIT;

-- 날짜 데이터 입력 방법 --

/*
    교수 테이블에 교수 번호는 9920, 교수 이름은 안중근
    입사일은 2015년 2월 1일, 학과 번호는 301 인 데이터 삽입
    날짜는 YY/MM/DD 형식으로 입력
*/

DESC PROFESSOR;

INSERT INTO PROFESSOR(PROFNO, NAME, HIREDATE, DEPTNO)
VALUES(9920, '안중근', '15/02/01', 301);

SELECT * FROM PROFESSOR;

/*
    교수 테이블에 교수 번호는 9921, 교수 이름은 윤봉길
    입사일은 2018년 1월 21일, 학과 번호는 201 인 데이터 삽입
    날짜는 YYYY/MM/DD 형식으로 입력
*/

INSERT INTO PROFESSOR(PROFNO, NAME, HIREDATE, DEPTNO)
VALUES(9921, '윤봉길', TO_DATE('2018/01/21', 'YYYY/MM,DD') , 201);

/*
    SYSDATE 함수를 이용한 현재 날짜 입력하기
*/

/*
    교수 테이블에 교수 번호는 9923, 교수 이름은 유관순, 아이디는 '31절',
    직급은 '전임강사', 급여는 222, 보직수당은 11, 입사일은 오늘, 학과 번호는 102 인 데이터 삽입
*/

INSERT INTO PROFESSOR
VALUES(9923, '유관순', '31절', '전임강사', 222, SYSDATE, 11 , 102);

COMMIT;

-- 단일 테이블에 다중 행 입력 : SUBQUERY 사용 -- 

INSERT INTO PROFESSOR
SELECT * FROM PROFESSOR WHERE PROFNO > 9905;

DESC SALGRADE;

INSERT INTO SALGRADE
SELECT * FROM SALGRADE WHERE GRADE = 3;

SELECT * FROM SALGRADE;

ROLLBACK;

-- 다중 행 입력 INSERT ALL --

CREATE TABLE WEIGHT_INFO(
    STUDNO NUMBER(5),
    NAME VARCHAR(10),
    WEIGHT NUMBER(5, 2)
);

CREATE TABLE HEIGHT_INFO(
    STUDNO NUMBER(5),
    NAME VARCHAR(10),
    WEIGHT NUMBER(5, 2)
);

SELECT * FROM WEIGHT_INFO;
SELECT * FROM HEIGHT_INFO;

INSERT ALL
INTO HEIGHT_INFO VALUES (STUDNO, NAME, HEIGHT)
INTO WEIGHT_INFO VALUES (STUDNO, NAME, WEIGHT)
SELECT STUDNO, NAME, HEIGHT, WEIGHT
FROM STUDENT
WHERE GRADE >= '2';

-- 조건 있는 다중 행 입력 INSERT ALL WHEN THEN --

/*
    학생 테이블에서 2학년 이상의 학생을 검색해
    HEIGHT_INFO 테이블에는 학생 테이블에서 키가 170보다 큰 학생의 학번 이름 키 입력
    WEIGHT_INFO 테이블에는 학생 테이블에서 몸무게가 70 보다 큰 학생의 학번 이름 키 입력
*/
DROP TABLE HEIGHT_INFO PURGE;
DROP TABLE WEIGHT_INFO PURGE;

INSERT ALL
WHEN HEIGHT > 170 THEN
    INTO HEIGHT_INFO VALUES ( STUDNO, NAME, HEIGHT )
WHEN WEIGHT > 70 THEN
    INTO WEIGHT_INFO VALUES( STUDNO, NAME, WEIGHT )
SELECT STUDNO, NAME, HEIGHT, WEIGHT
FROM STUDENT
WHERE GRADE >= 2;

-- 다중 행 입력 : CONDITIONAL - FIRST INSERT --

/*
    학생 테이블에서 2학년 이상의 학생을 검색해
    HEIGHT_INFO 테이블에는 학생 테이블에서 키가 170보다 큰 학생의 학번 이름 키 입력
    WEIGHT_INFO 테이블에는 학생 테이블에서 몸무게가 70 보다 큰 학생의 학번 이름 키 입력
    
    조건 : 키가 170 보다 크고 몸무게도 70 보다 큰 학생의 정보는 HEIGHT_INFO 에만 입력
*/

INSERT FIRST
WHEN HEIGHT > 170 THEN
    INTO HEIGHT_INFO VALUES ( STUDNO, NAME, HEIGHT )
WHEN WEIGHT > 70 THEN
    INTO WEIGHT_INFO VALUES( STUDNO, NAME, WEIGHT )
SELECT STUDNO, NAME, HEIGHT, WEIGHT
FROM STUDENT
WHERE GRADE >= 2;

ROLLBACK;


-- 다중 행 입력 : PIVOTING INSERT --

CREATE TABLE SALES_OF_DAY(
    SALES_NO    NUMBER(6),
    WEEK_NO     NUMBER(4),
    SALES_MON  NUMBER(7, 2),
    SALES_TUE    NUMBER(7, 2),
    SALES_WED   NUMBER(7, 2),
    SALES_THU    NUMBER(7, 2),
    SALES_FRI      NUMBER(7, 2)
);

INSERT INTO SALES_OF_DAY
VALUES (1101, 4, 100, 150, 80, 60, 120);

INSERT INTO SALES_OF_DAY
VALUES (1102, 5, 300, 300, 230, 120, 150);

CREATE TABLE SALES_DATA(
    SALES_NO    NUMBER(6),
    WEEK_NO     NUMBER(4),
    DAY_NO       NUMBER(4),
    SALES           NUMBER(7, 2)
);

/*
    PIVOTING INSERT 명령문을 사용해서 SALES_OF_DAY 테이블의 요일별 데이터를 통합해
    SALES_DATA 테이블에 하나의 행으로 입력하세요
*/

INSERT ALL
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, '1', SALES_MON)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, '2', SALES_TUE)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, '3', SALES_WED)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, '4', SALES_THU)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, '5', SALES_FRI)
SELECT SALES_NO, WEEK_NO, SALES_MON, SALES_TUE, SALES_WED, SALES_THU, SALES_FRI
FROM SALES_OF_DAY;

SELECT * FROM SALES_DATA;